{"extensions":{"recommendations":["github.copilot","github.copilot-chat","eamodio.gitlens"]},"folders":[{"name":"terraform-provider-smartprompt","path":"../terraform-provider-smartprompt"},{"name":"smartprompt-api","path":"../smartprompt-api"},{"name":"smartprompt-client","path":"../smartprompt-client"},{"name":"smartprompt-infra-deployment","path":"../smartprompt-infra-deployment"},{"name":"smartprompt-website","path":"../smartprompt-website"},{"name":"docs/provider/google/data-sources","path":"~/.gproj/docs/smartprompt/docs/provider/google/data-sources"},{"name":"docs/provider/google/resources","path":"~/.gproj/docs/smartprompt/docs/provider/google/resources"},{"name":"docs/terraform-plugin-sdk/plugin/sdkv2","path":"~/.gproj/docs/smartprompt/docs/terraform-plugin-sdk/plugin/sdkv2"},{"name":"docs/terraform/language/tests","path":"~/.gproj/docs/smartprompt/docs/terraform/language/tests"},{"name":"docs/openai-python","path":"~/.gproj/docs/smartprompt/docs/openai-python"},{"name":"docs/openai-go","path":"~/.gproj/docs/smartprompt/docs/openai-go"},{"name":"docs/anthropic-python","path":"~/.gproj/docs/smartprompt/docs/anthropic-python"},{"name":"providers/google/data-sources","path":"${userHome}/.gproj/docs/docs/provider/google/data-sources"},{"name":"providers/google/resources","path":"${userHome}/.gproj/docs/docs/provider/google/resources"},{"name":"plugin/sdkv2","path":"${userHome}/.gproj/docs/docs/terraform-plugin-sdk/plugin/sdkv2"},{"name":"tests","path":"${userHome}/.gproj/docs/docs/terraform/language/tests"},{"name":"docs/openai-python","path":"${userHome}/.gproj/docs/docs/openai-python"},{"name":"docs/openai-go","path":"${userHome}/.gproj/docs/docs/openai-go"},{"name":"docs/anthropic-python","path":"${userHome}/.gproj/docs/docs/anthropic-python"}],"launch":{"configurations":[],"version":"0.2.0"},"settings":{"[terraform]":{"editor.defaultFormatter":"hashicorp.terraform","editor.formatOnSave":true,"editor.formatOnSaveMode":"file"},"editor.formatOnSave":true,"editor.inlineSuggest.enabled":true,"editor.rulers":[80,120],"files.exclude":{"**/.DS_Store":true,"**/.git":true},"github.copilot.enable":{"*":true},"project_name":"smartprompt","project_prompt":"# Prompt Refinement System\n\n## Overview\nThis project transforms simple \"lazy\" prompts into rich, high-quality prompts, making the functionality accessible via both web API and Terraform.\n\n## Components\n\n### 1. Prompt Refinement API (FastAPI)\n- RESTful service for prompt enhancement\n- Endpoint: POST /refine-prompt\n- Features:\n  - JSON payload with \"lazy_prompt\" field\n  - Enhanced prompt response\n  - Error handling and logging\n  - OpenAPI documentation\n  - Token-based authentication\n  - Request validation\n\n### 2. Golang Client Library\n- Client interface for prompt refinement API\n- Core functionality:\n  - Simple RefinePrompt function\n  - Configuration management\n  - Error handling with retries\n  - Comprehensive documentation\n  - Authentication token management\n  - Secure token storage\n\n### 3. Terraform Provider (Golang)\n- Integration with client library\n- Features:\n  - Resource/data source for prompt refinement\n  - Input: \"lazy_prompt\"\n  - Output: \"refined_prompt\"\n  - Terraform Plugin SDK compliance\n  - Complete schema definitions\n  - Documentation and build instructions\n  - Authentication configuration\n  - Token validation\n\n### 4. GCP Deployment Code\n- Terraform deployment configuration for GCP\n- Components:\n  - Containerized infrastructure (Cloud Run/App Engine)\n  - Dockerfile for FastAPI application\n  - Container registry integration\n  - IAM role configuration\n  - Environment variable management\n  - Secure API access setup\n\n## Authentication\nThe system implements token-based authentication across all components:\n\n### API Authentication\n- Bearer token authentication required for all API endpoints\n- Token validation middleware\n- Rate limiting per token\n- Token expiration and rotation support\n\n### Client Library Authentication\n- Token management utilities\n- Secure token storage\n- Automatic token refresh handling\n- Configuration via environment variables or explicit setup\n\n### Terraform Provider Authentication\n- Token configuration via provider block\n- Support for environment variables\n- Sensitive value handling for tokens\n- Optional token rotation configuration\n\n## Integration Overview\nThe system simplifies prompt management through:\n- Automatic refinement of simple prompts\n- Seamless infrastructure integration\n- Cloud-native deployment\n- Production-ready architecture\n\nThis project serves as a complete solution for transforming basic prompts into detailed, high-quality versions while maintaining ease of use and scalability.","repo_org":"HappyPathway","workbench.iconTheme":"vscode-icons"},"tasks":[]}